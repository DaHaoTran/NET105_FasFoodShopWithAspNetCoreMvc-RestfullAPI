// <auto-generated />
using System;
using API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodShop.Migrations
{
    [DbContext(typeof(FoodShopDBContext))]
    [Migration("20240602141845_FoodShopNET105Identity")]
    partial class FoodShopNET105Identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodShop.Models.Admin", b =>
                {
                    b.Property<string>("AdminCode")
                        .HasColumnType("Char(5)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("Varchar(200)");

                    b.Property<bool?>("IsOnl")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.HasKey("AdminCode");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("FoodShop.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("Varchar(200)");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerEmail")
                        .IsUnique();

                    b.ToTable("cart");
                });

            modelBuilder.Entity("FoodShop.Models.CartItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("FoodCode")
                        .IsRequired()
                        .HasColumnType("Char(5)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("FoodCode");

                    b.ToTable("cartItem");
                });

            modelBuilder.Entity("FoodShop.Models.Customer", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("Varchar(200)");

                    b.Property<string>("AdminCode")
                        .HasColumnType("Char(5)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("Varchar(300)");

                    b.HasKey("Email");

                    b.HasIndex("AdminCode");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("FoodShop.Models.CustomerInformation", b =>
                {
                    b.Property<int>("CInforId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CInforId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("Varchar(200)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("Char(10)");

                    b.HasKey("CInforId");

                    b.HasIndex("CustomerEmail");

                    b.ToTable("customerInformation");
                });

            modelBuilder.Entity("FoodShop.Models.Food", b =>
                {
                    b.Property<string>("FoodCode")
                        .HasColumnType("Char(5)");

                    b.Property<string>("AdminCode")
                        .HasColumnType("Char(5)");

                    b.Property<int>("CurrentPrice")
                        .HasColumnType("int");

                    b.Property<string>("FCategoryCode")
                        .IsRequired()
                        .HasColumnType("Char(4)");

                    b.Property<string>("FTypeCode")
                        .IsRequired()
                        .HasColumnType("Char(4)");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("Varchar(Max)");

                    b.Property<int>("Left")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousPrice")
                        .HasColumnType("int");

                    b.Property<int?>("Sold")
                        .HasColumnType("int");

                    b.HasKey("FoodCode");

                    b.HasIndex("AdminCode");

                    b.HasIndex("FCategoryCode");

                    b.HasIndex("FTypeCode");

                    b.ToTable("foods");
                });

            modelBuilder.Entity("FoodShop.Models.FoodCategory", b =>
                {
                    b.Property<string>("FCategoryCode")
                        .HasColumnType("Char(4)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("Varchar(Max)");

                    b.HasKey("FCategoryCode");

                    b.ToTable("foodCategory");
                });

            modelBuilder.Entity("FoodShop.Models.FoodType", b =>
                {
                    b.Property<string>("FTypeCode")
                        .HasColumnType("Char(4)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("FTypeCode");

                    b.ToTable("foodType");
                });

            modelBuilder.Entity("FoodShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("CInforId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("Nvarchar(Max)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("Varchar(200)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerEmail");

                    b.ToTable("order");
                });

            modelBuilder.Entity("FoodShop.Models.OrderItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("FoodCode")
                        .IsRequired()
                        .HasColumnType("Char(5)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("FoodCode");

                    b.HasIndex("OrderId");

                    b.ToTable("orderItem");
                });

            modelBuilder.Entity("FoodShop.Models.Rating", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RateId"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("Varchar(200)");

                    b.Property<string>("FoodCode")
                        .IsRequired()
                        .HasColumnType("Char(5)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("RateId");

                    b.HasIndex("CustomerEmail");

                    b.HasIndex("FoodCode");

                    b.ToTable("rating");
                });

            modelBuilder.Entity("FoodShop.Models.Cart", b =>
                {
                    b.HasOne("FoodShop.Models.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("FoodShop.Models.Cart", "CustomerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FoodShop.Models.CartItem", b =>
                {
                    b.HasOne("FoodShop.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodShop.Models.Food", "Food")
                        .WithMany("CartItems")
                        .HasForeignKey("FoodCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodShop.Models.Customer", b =>
                {
                    b.HasOne("FoodShop.Models.Admin", "Admins")
                        .WithMany("customers")
                        .HasForeignKey("AdminCode");

                    b.Navigation("Admins");
                });

            modelBuilder.Entity("FoodShop.Models.CustomerInformation", b =>
                {
                    b.HasOne("FoodShop.Models.Customer", "Customer")
                        .WithMany("CustomerInformations")
                        .HasForeignKey("CustomerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FoodShop.Models.Food", b =>
                {
                    b.HasOne("FoodShop.Models.Admin", "Admin")
                        .WithMany("foods")
                        .HasForeignKey("AdminCode");

                    b.HasOne("FoodShop.Models.FoodCategory", "FoodCategory")
                        .WithMany("foods")
                        .HasForeignKey("FCategoryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodShop.Models.FoodType", "FoodType")
                        .WithMany("foods")
                        .HasForeignKey("FTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("FoodCategory");

                    b.Navigation("FoodType");
                });

            modelBuilder.Entity("FoodShop.Models.Order", b =>
                {
                    b.HasOne("FoodShop.Models.Customer", "Customer")
                        .WithMany("orders")
                        .HasForeignKey("CustomerEmail");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FoodShop.Models.OrderItem", b =>
                {
                    b.HasOne("FoodShop.Models.Food", "Food")
                        .WithMany("OrderItems")
                        .HasForeignKey("FoodCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodShop.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodShop.Models.Rating", b =>
                {
                    b.HasOne("FoodShop.Models.Customer", "Customer")
                        .WithMany("ratings")
                        .HasForeignKey("CustomerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodShop.Models.Food", "Food")
                        .WithMany("Ratings")
                        .HasForeignKey("FoodCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodShop.Models.Admin", b =>
                {
                    b.Navigation("customers");

                    b.Navigation("foods");
                });

            modelBuilder.Entity("FoodShop.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("FoodShop.Models.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("CustomerInformations");

                    b.Navigation("orders");

                    b.Navigation("ratings");
                });

            modelBuilder.Entity("FoodShop.Models.Food", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("FoodShop.Models.FoodCategory", b =>
                {
                    b.Navigation("foods");
                });

            modelBuilder.Entity("FoodShop.Models.FoodType", b =>
                {
                    b.Navigation("foods");
                });

            modelBuilder.Entity("FoodShop.Models.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
